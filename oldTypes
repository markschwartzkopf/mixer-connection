import {
  MixerBoolean,
  MixerEnum,
  MixerExponential,
  MixerIndex,
  MixerKey,
  MixerLeaf,
  MixerLevel,
  MixerLinear,
  MixerString,
  MixerStripType,
} from '../mixer-object-utils/leaf-types';

type MixerModel = 'XM32' | 'Xair' | 'Wing' | 'noMixer';

export interface MixerModule {
  setValuePromise: (
    address: string[],
    value: NodeValue | NodeObject
  ) => Promise<void>;
  setValue: (address: string[], value: NodeValue | NodeObject) => void | string;
  close: () => void;
  status: MixerStatus;
  mixerObject: MixerObject;

  on<U extends keyof ModuleEvents>(event: U, listener: ModuleEvents[U]): this;
  once<U extends keyof ModuleEvents>(event: U, listener: ModuleEvents[U]): this;
  emit<U extends keyof ModuleEvents>(
    event: U,
    ...args: Parameters<ModuleEvents[U]>
  ): boolean;
}

interface ModuleEvents {
  error: (err: Error) => void;
  closed: () => void;
  info: (info: string) => void;
  connected: () => void;
}

type NodeValue = MixerLeaf['value'];
type NodeObject =
  | { [k: string]: NodeValue | NodeObject }
  | NodeValue[]
  | NodeObject[];

type MixerStatus = 'CONNECTED' | 'CONNECTING' | 'CLOSED';

type MixerObject = {
  strips: {
    ch: MixerStrip[];
    aux?: MixerStrip[];
    fxrtn?: MixerStrip[];
    bus?: MixerStrip[];
    matrix?: MixerStrip[];
    main: MixerStrip[];
  };
  groups: {
    dca: MixerDca[];
    muteGroup: MixerMuteGroup[];
    layer: MixerLayer[];
  };
  fx?: { model: MixerKey<string, string> } & {
    [k: string]: MixerNode | MixerLeaf;
  };
  config: MixerNode;
  icons?: MixerIcons;
};

type MixerStrip = {
  name?: MixerString;
  color?: MixerEnum<string>; //hex color string, enum
  icon?: MixerEnum<string>;
  source?: {
    type: MixerEnum<string>;
    index: MixerIndex;
  };
  delay?: {
    time: MixerLinear; //ms
    on?: MixerBoolean;
  };
  preamp?: {
    gain?: MixerLinear; //db
    trim?: MixerLinear; //db
    invert?: MixerBoolean;
  };
  mute: MixerBoolean;
  level: MixerLevel; //db
  pan?: MixerLinear; //%
  width?: MixerLinear; //%
  custom?: MixerNode;
  eq?: {
    filters?: {
      //dedicated filters
      hp?: {
        freq: MixerExponential; //Hz
        slope: MixerLinear;
        on: MixerBoolean;
      };
      lp?: {
        freq: MixerExponential; //Hz
        slope: MixerLinear;
        on: MixerBoolean;
      };
    };
    bands?: {
      type: MixerEnum<string>;
      gain?: MixerLinear; //db
      freq: MixerExponential; //Hz
      q: MixerLinear; //q or slope
      on: MixerBoolean;
    };
  };
  dyn1?: MixerDynamicsPlugin;
  dyn2?: MixerDynamicsPlugin;
  order: MixerEnum<string>[]; //order of processing. Input is always first
  ins1?: MixerNode;
  ins2?: MixerNode;
  send?: {
    type: MixerStripType;
    index: MixerIndex;
    on: MixerBoolean;
    level: MixerLevel; //db
    tap: MixerEnum<string>; //index of channel strip order that tap is after
    pan?: MixerLinear; //%
    panFollow: MixerBoolean;
  }[];
  main?: {
    type: MixerStripType;
    index: MixerIndex;
    level?: MixerLevel; //db
    on?: MixerBoolean;
  }[];
  dca: MixerBoolean[];
  mutegroup: MixerBoolean[];
};
type MixerDca = {
  name?: MixerString;
  color?: MixerEnum<string>; //hex color string, enum
  icon?: MixerEnum<string>; //enum
  mute: MixerBoolean;
  level: MixerLevel; //db
};
type MixerMuteGroup = {
  name?: MixerString;
  color?: MixerEnum<string>; //hex color string, enum
  icon?: MixerEnum<string>; //enum
  on: MixerBoolean;
};
type MixerLayer = {
  name: MixerString;
  assigned: {
    type: MixerStripType;
    index: MixerIndex;
  }[];
};
type MixerIcons = {
  [k: string]: MixerString; //name: base64 image
};

type MixerNode =
  | { [k: string]: MixerNode | MixerLeaf }
  | MixerNode[]
  | MixerLeaf[];

type MixerDynamicsPlugin = (MixerCompExp | MixerGateDuck | MixerOtherDyn) &
  MixerDynamicsCommon;

type MixerCompExp = {
  type: MixerKey<
    Partial<'comp' | 'exp' | 'gate' | 'duck' | 'other'>,
    Partial<'comp' | 'exp'>
  >;
  custom?: MixerNode;
  env: MixerEnum<'lin' | 'log'>;
  knee: MixerLinear;
  mgain: MixerLinear; //db
  thr: MixerExponential; //db
  auto?: MixerBoolean;
  att?: MixerLinear; //ms
  hold?: MixerLinear; //ms
  rel?: MixerLinear; //ms
  ratio: MixerExponential;
};

type MixerGateDuck = {
  type: MixerKey<
    Partial<'comp' | 'exp' | 'gate' | 'duck' | 'other'>,
    Partial<'gate' | 'duck'>
  >;
  custom?: MixerNode;
  env: MixerEnum<'lin' | 'log'>;
  thr: MixerExponential; //db
  auto?: MixerBoolean;
  att?: MixerLinear; //ms
  hold?: MixerLinear; //ms
  rel?: MixerLinear; //ms
  range: MixerLinear;
};

type MixerOtherDyn = {
  type: MixerKey<
    Partial<'comp' | 'exp' | 'gate' | 'duck' | 'other'>,
    Partial<'other'>
  >;
  model: MixerEnum<string>;
  custom: MixerNode;
};

type MixerDynamicsCommon = {
  on: MixerBoolean;
  sideChain?: {
    srcType: MixerStripType;
    srcIndex: MixerIndex;
    srcTap: MixerEnum<string>;
    filter?: {
      on: MixerBoolean;
      type: MixerEnum<'bandpass' | 'lowpass' | 'highpass'>;
      freq: MixerExponential; //Hz
      q?: MixerLinear; //q or slope
    };
  };
};

//Rework:
interface _MixerNode {
  _model: MixerModel;
  _address: string[];
  _children: (_MixerNode | MixerLeaf)[];
}

interface _MixerObject extends _MixerNode {
	strips: _MixerS
}
